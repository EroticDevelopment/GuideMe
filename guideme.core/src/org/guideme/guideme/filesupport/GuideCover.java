package org.guideme.guideme.filesupport;

import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import org.guideme.guideme.player.ui.PlayerWindow;
import org.guideme.guideme.resources.Icons;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
        displayName = "#LBL_GuideMe_VISUAL",
        iconBase = "org/guideme/guideme/resources/guide.png",
        mimeType = "application/guideme+xml",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "GuideCover",
        position = 500
)
@Messages("LBL_GuideMe_VISUAL=Cover")
public final class GuideCover extends JPanel implements MultiViewElement {

    private GuideDataObject obj;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;

    public GuideCover(Lookup lkp) {
        obj = lkp.lookup(GuideDataObject.class);
        assert obj != null;
        initComponents();

        initializeToolbar();
        showGuideDetails();
    }

    private void initializeToolbar() {
        JButton playButton = new JButton("Play", Icons.getPlayGuideIcon());
        playButton.addActionListener((java.awt.event.ActionEvent evt) -> {
            PlayerWindow window = new PlayerWindow();
            window.setVisible(true);
            window.setExtendedState(Frame.MAXIMIZED_BOTH);
            window.playGuide(obj.getGuide());
        });
        toolbar.add(playButton);
    }

    private void showGuideDetails() {
        FileObject thumbnail = obj.getPrimaryFile().getParent().getFileObject(obj.getGuide().getThumbnail());
        ImagePanel imagePanel = new ImagePanel(FileUtil.toFile(thumbnail));
        imagePanel.setSize(thumbnailPanelHolder.getSize());
        thumbnailPanelHolder.add(imagePanel);
        
        titleLabel.setText(obj.getGuide().getTitle());
        authorLabel.setText(obj.getGuide().getAuthorName());
    }

    @Override
    public String getName() {
        return "GuideCover";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        thumbnailPanelHolder = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        authorLabel = new javax.swing.JLabel();

        thumbnailPanelHolder.setBackground(javax.swing.UIManager.getDefaults().getColor("windowBorder"));
        thumbnailPanelHolder.setMinimumSize(new java.awt.Dimension(120, 100));
        thumbnailPanelHolder.setPreferredSize(new java.awt.Dimension(120, 100));
        thumbnailPanelHolder.setSize(new java.awt.Dimension(120, 100));

        javax.swing.GroupLayout thumbnailPanelHolderLayout = new javax.swing.GroupLayout(thumbnailPanelHolder);
        thumbnailPanelHolder.setLayout(thumbnailPanelHolderLayout);
        thumbnailPanelHolderLayout.setHorizontalGroup(
            thumbnailPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 120, Short.MAX_VALUE)
        );
        thumbnailPanelHolderLayout.setVerticalGroup(
            thumbnailPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        titleLabel.setFont(titleLabel.getFont().deriveFont(titleLabel.getFont().getStyle() | java.awt.Font.BOLD, titleLabel.getFont().getSize()+3));
        org.openide.awt.Mnemonics.setLocalizedText(titleLabel, org.openide.util.NbBundle.getMessage(GuideCover.class, "GuideCover.titleLabel.text")); // NOI18N

        authorLabel.setFont(authorLabel.getFont().deriveFont((authorLabel.getFont().getStyle() | java.awt.Font.ITALIC)));
        org.openide.awt.Mnemonics.setLocalizedText(authorLabel, org.openide.util.NbBundle.getMessage(GuideCover.class, "GuideCover.authorLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(thumbnailPanelHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel)
                    .addComponent(authorLabel))
                .addContainerGap(213, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(titleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(authorLabel))
                    .addComponent(thumbnailPanelHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(194, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel authorLabel;
    private javax.swing.JPanel thumbnailPanelHolder;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return obj.getLookup();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    public class ImagePanel extends JPanel {
        
        Image image;
        
        public ImagePanel(File imageFile) {
            try {
                image = ImageIO.read(imageFile);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (image != null) {
                g.drawImage(image, 0, 0, null);
            }
        }
        
    }
}
