package org.guideme.guideme.filesupport;

import java.awt.Frame;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import org.guideme.guideme.player.ui.PlayerWindow;
import org.guideme.guideme.resources.Icons;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
        displayName = "#LBL_GuideMe_VISUAL",
        iconBase = "org/guideme/guideme/resources/guide.png",
        mimeType = "application/guideme+xml",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "GuideCover",
        position = 500
)
@Messages("LBL_GuideMe_VISUAL=Cover")
public final class GuideCover extends JPanel implements MultiViewElement {

    private GuideDataObject obj;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;

    public GuideCover(Lookup lkp) {
        obj = lkp.lookup(GuideDataObject.class);
        assert obj != null;
        initComponents();

        initializeToolbar();
        showGuideDetails();
    }

    private void initializeToolbar() {
        JButton playButton = new JButton("Play", Icons.getPlayGuideIcon());
        playButton.addActionListener((java.awt.event.ActionEvent evt) -> {
            PlayerWindow window = new PlayerWindow();
            window.setVisible(true);
            window.setExtendedState(Frame.MAXIMIZED_BOTH);
            window.playGuide(obj.getGuide());
        });
        toolbar.add(playButton);
    }

    private void showGuideDetails() {
        titleField.setText(obj.getGuide().getTitle());
    }

    @Override
    public String getName() {
        return "GuideCover";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleField = new javax.swing.JTextField();

        titleField.setText(org.openide.util.NbBundle.getMessage(GuideCover.class, "GuideCover.titleField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleField, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(266, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField titleField;
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return obj.getLookup();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

}
