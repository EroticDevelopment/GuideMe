package org.guideme.guideme.player.ui;

import org.guideme.guideme.player.GuidePlayer;
import org.guideme.guideme.project.GuideProject;
import org.guideme.guideme.player.PageDecorator;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

@ConvertAsProperties(
        dtd = "-//org.guideme.guideme.player//GuidePlayer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "GuidePlayerTopComponent",
        iconBase="org/guideme/guideme/resources/playGuide.png", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.guideme.guideme.player.ui.GuidePlayerTopComponent")
@ActionReference(path = "Menu/Window", position = 10, separatorAfter = 11)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_GuidePlayerAction",
        preferredID = "GuidePlayerTopComponent"
)
@Messages({
    "CTL_GuidePlayerAction=Guide Player",
    "CTL_GuidePlayerTopComponent=Guide Player",
    "HINT_GuidePlayerTopComponent=This is the GuidePlayer window"
})
public final class GuidePlayerTopComponent extends TopComponent {

    private GuidePlayer guidePlayer;
    
    static GuidePlayerTopComponent findInstance() {
        return (GuidePlayerTopComponent)WindowManager.getDefault().findTopComponent("GuidePlayerTopComponent");
    }

    public GuidePlayerTopComponent() {
        initComponents();
        setName(Bundle.CTL_GuidePlayerTopComponent());
        setToolTipText(Bundle.HINT_GuidePlayerTopComponent());
    }

    public void loadGuide(GuideProject guideProject) {
        guidePlayer = new GuidePlayer(guideProject);
        
        setDisplayName(guidePlayer.getTitle());
        
        // TODO: Implement play functionality....
        guidePlayer.start();
        
        // TODO subscribe to guidePlayer.currentPageChanged event
        showPage(guidePlayer.getCurrentPage());
    }
    
    void showPage(PageDecorator page) {
        pageId.setText(page.getPage().getId());
        textTextArea.setText(page.getPage().getText());
        imageUrl.setText(page.getPage().getImages().get(0).getId());
        
        continueButton.setVisible(page.hasAvailableButton());
    }
    
    @Override
    public void open() {
        Mode mode = WindowManager.getDefault().findMode("editor");
        if (mode != null) {
            mode.dockInto(this);
            super.open();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pageId = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textTextArea = new javax.swing.JTextArea();
        continueButton = new javax.swing.JButton();
        imageUrl = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(pageId, org.openide.util.NbBundle.getMessage(GuidePlayerTopComponent.class, "GuidePlayerTopComponent.pageId.text")); // NOI18N
        pageId.setToolTipText(org.openide.util.NbBundle.getMessage(GuidePlayerTopComponent.class, "GuidePlayerTopComponent.pageId.toolTipText")); // NOI18N

        textTextArea.setEditable(false);
        textTextArea.setColumns(20);
        textTextArea.setRows(5);
        jScrollPane1.setViewportView(textTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(continueButton, org.openide.util.NbBundle.getMessage(GuidePlayerTopComponent.class, "GuidePlayerTopComponent.continueButton.text")); // NOI18N
        continueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(imageUrl, org.openide.util.NbBundle.getMessage(GuidePlayerTopComponent.class, "GuidePlayerTopComponent.imageUrl.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pageId)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(imageUrl)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(continueButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pageId)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageUrl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(continueButton)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        pageId.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(GuidePlayerTopComponent.class, "GuidePlayerTopComponent.pageId.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void continueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueButtonActionPerformed
        // TODO add your handling code here:
        guidePlayer.buttonPressed(guidePlayer.getCurrentPage().getAvailableButton());
        // TODO this should automatically happened as we are subcribed to the page changed event.
        showPage(guidePlayer.getCurrentPage());
    }//GEN-LAST:event_continueButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton continueButton;
    private javax.swing.JLabel imageUrl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel pageId;
    private javax.swing.JTextArea textTextArea;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
